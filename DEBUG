1.*****No module named cv*****

>>sudo apt-get install python-opencv
  source ~/.bashrc
--doesn't work.

>>>source activate /home/chang/anaconda2
   conda install opencv 
---work and make sure you install anaconda first. 

===================================================================================================================================

2.*****如1安装后，no module named cv2.cv*****
>>>需再安装cv，或直接使用cv2，cv2和cv区别：
 

**************************
//blog.csdn.net/summermaoz/article/details/67637325
将代码放在师姐电脑上跑的时候，用的是python2.7
出现cv2.cv，没有cv这个属性，在命令行import cv 时出错，没有cv这个module，但是可以import cv2，解决方式是下载安装opencv。
1、两个下载模块的地址： https://pypi.python.org/pypi
2、介绍cv:  http://www.programcreek.com/python/index/413/cv
安装cv2模块：whl文件可以
安装cv模块（可以不要cv模块）
opencv版本问题，3.x不能cv2.cv, 2.x可以
例子：
           videocapture = cv2.VideoCapture(VideoFile)
安装cv:    fps = videocapture.get(cv2.cv.CV_CAP_PROP_FPS)
未安装cv：fps = videocapture.get(cv2.CAP_PROP_FPS)

3、两者区别：
cv2扩展库是针对OpenCV 2.x API创建的，直接采用NumPy的数组对象表示图像，和pyopencv相比，不再需要在数组和Mat对象之间相互转换了。
cv2的函数直接对Numpy数组进行操作，
cv2读取图像是数组，array = cv2.imread()

（1）cv读取图像：
①iplimage = cv.LoadImage()  
<type 'cv2.cv.iplimage'>
<iplimage(nChannels=3 width=1212 height=824 widthStep=3636 )>
②cvmat = cv.LoadImageM()
<type 'cv2.cv.cvmat'>
<cvmat(type=42424010 8UC3 rows=824 cols=1212 step=3636 )>

（2）array, iplimage, cvmat 转换
array------>     cvmat:        cv.fromarray(array)
cvmat------>    array:         np.asarray(cvamt)
cvmat------>    iplimage:    cv.GetImage(cvmat)  
iplimage---->   cvmat:       iplimage[:], 或 cv.GetMat(iplimage)

**************************

===================================================================================================================================

3.******after conda install opencv,cv2.VideoCapture.isOpened() always return false********
---opencv is not installed correctly.
>>>conda uninstall opencv
>>>copy cv2.so from /usr/lib/python2.7/dist-packages/cv2.so to /anaconda2/lib/python2.7/site-packages/cv2.so

>>pip install opencv-python
===================================================================================================================================

4.*****更改anaconda镜像********
>>>按照https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/的命令
	conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
	conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
	conda config --set show_channel_urls yes
>>>conda config --show可以查看
>>>可以继续修改default_channels:gedit ~/.condarc
	channels:
	  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
	  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
	  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
	  - defaults
	default_channels:
	  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free
	  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
	  - https://repo.continuum.io/pkgs/free
	  - https://repo.continuum.io/pkgs/r
	  - https://repo.continuum.io/pkgs/pro
	show_channel_urls: true
===================================================================================================================================


ubuntu查看已安装：dpkg --list


===================================================================================================================================
5.*****python中利用rarfile解压文件
>>>pip install rarfile
   
   import rarfile
   file = rarfile.RarFile('file_name')  #这里写入的是需要解压的文件，别忘了加路径
   file.extractall('you_want_path')  #这里写入的是你想要解压到的文件夹
   file.close()
===================================================================================================================================

6.*****python递归删除非空文件*****
   
   import shutil
   shutil.rmtree('/folder_name')
---存在只读文件删除失败

   import shutil
   shutil.rmtree(dest, ignore_errors=True)
---存在只读文件等报错时，会忽略错误。

   shutil.rmtree(path,ignore_errors=False,onerror=errorRemoveReadonly) 
   def errorRemoveReadonly(func, path, exc):
       excvalue = exc[1]
       if func in (os.rmdir, os.remove) and excvalue.errno == errno.EACCES:
	   # change the file to be readable,writable,executable: 0777
	   os.chmod(path, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)  
	   # retry
	   func(path)
       else:
	   raiseenter code here
---删除只读文件

>>>利用os.work
	# Delete everything reachable from the directory named in 'top',
	# assuming there are no symbolic links.
	# CAUTION:  This is dangerous!  For example, if top == '/', it
	# could delete all your disk files.
	import os
	def rmAllDirs(top):
	    if top=='/':
		print "DANGEROUS!YOU MAY DELETE ALL FILES IN SYSTEM."
	    else:
		for root, dirs, files in os.walk(top, topdown=False):
		    for name in files:
		        os.remove(os.path.join(root, name))
		    for name in dirs:
		        os.rmdir(os.path.join(root, name))
		os.rmdir(top)


===================================================================================================================================
7.******关于一个进度条*****
---安装一个类似插件的包tqdm，可以很方便将for循环的运行进度以进度条的方式展现出来
   tqdm主页：https://pypi.python.org/pypi/tqdm
   看到一句话：tqdm means “progress” in Arabic (taqadum, تقدّم) and an abbreviation for “I love you so much” in Spanish (te quiero demasiado).
   
>>>pip install tqdm

   from tqdm import tqdm
   for i in tqdm(range(10000)):
    ...

=====================================================================================================================================================
8.
tensorflow about:
when load trained GoogleNet to extract feature map:
   ************************************************************** 
   [libprotobuf ERROR google/protobuf/io/coded_stream.cc:207] A protocol message was rejected because it was too big (more than 67108864 bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.
Traceback (most recent call last):
                   ...
      graph_def.ParseFromString(f.read())
    google.protobuf.message.DecodeError: Error parsing message 
   **************************************************************
>>>pip show protobuf
---显示protobuf为3.0.0版本，这个版本parse limit是64M
>>>conda search protobuf
---可以看到最新3.5.0版本的
>>>conda install protobuf
---安装最新版本protobuf，最新版本的parse limit由64M升至2G，可以解决问题
>>>pip show protobuf
---显示为3.5.0版本，重新运行程序，问题解决

参考https://github.com/tensorflow/tensorflow/issues/582中的答案，其中一个方案是改protobuf代码，重新编译，这个做法比较麻烦；后面有protobuf开发人员回答，直接更新版本可以解决问题https://github.com/tensorflow/tensorflow/issues/8187 所以看这些解决方案一定要耐心看到最后。


在pycharm运行程序时，报错
   **************************************************************
E tensorflow/stream_executor/cuda/cuda_dnn.cc:368] Loaded runtime CuDNN library: 7001 (compatibility version 7000) but source was compiled with 5105 (compatibility version 5100).  If using a binary install, upgrade your CuDNN library to match.  If building from sources, make sure the library loaded at runtime matches a compatible version specified during compile configuration.
   **************************************************************
查看cudnn版本
cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2
查看cuda版本
cat /usr/local/cuda/version.txt

---官网下载(需要注册）相应版本cudnn，解压，添加环境变量
>>>gedit ～/.bashrc
增加一行export LD_LIBRARY_PATH=/path/to/cudnn/lib64：$LD_LIBRARY_PATH
>>>source ～/.bashrc
LD_LIBRARY_PATH  这个环境变量告诉loader：在哪些目录中可以找到共享库。可以设置多个搜索目录，这些目录之间用冒号分隔开。
REF:http://m.blog.csdn.net/zhaishengfu/article/details/52333674

如上配置后，命令行python运行没问题，pycharm仍然报错
---需要在pycharm中配置环境变量:菜单-run-Edit Configurations,在环境变量一栏填入LD_LIBRARY_PATH和/path/to/cudnn/lib64
REF:http://blog.csdn.net/e_walle/article/details/70158005

GPU:http://blog.csdn.net/guvcolie/article/details/77164230
=====================================================================================================================================================
9.np.save()和np.load()
---np.save()可以将多个array分多次保存再同一个.npy文件中，但是注意这种情况下np.load()不会一次性将.npy所有内容加载，而是每次load()对应一次save()的内容

---注意以下两个例子输出的差别：

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
f = file('/data/UCF11/npys/test.npy', 'ab')
x= []
a = np.array([[1,2,3],[4,5,6]])
x.append(a)
a = np.array([[11,12,13],[11,15,16]])
x.append(a)
np.save(f,x)
f.close()
f = file('/data/UCF11/npys/test.npy', 'rb')
np.load(f)

Out: 
array([[[ 1,  2,  3],
        [ 4,  5,  6]],
       [[11, 12, 13],
        [11, 15, 16]]])


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
f = file('/data/UCF11/npys/test.npy', 'ab')
x= []
a = np.array([[1,2,3],[4,5,6]])
x.append(a)
a = np.array([[11,12,13],[11,15,16]])
x.append(a)
np.save(f,x[0])
np.save(f,x[1])
f.close()
f = file('/data/UCF11/npys/test.npy', 'rb')
np.load(f)

Out: 
array([[1, 2, 3],
       [4, 5, 6]])

np.load(f)
Out: 
array([[11, 12, 13],
       [11, 15, 16]])

=====================================================================================================================================================
10.python获取系统当前时间，输入日期时间

*******************************************************************
import time
time.localtime(time.time())
time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))
*******************************************************************

print time.time()
输出的结果是：
1357723206.31

用time.localtime()方法，作用是格式化时间戳为本地的时间。
输出的结果是：
time.struct_time(tm_year=2010, tm_mon=7, tm_mday=19, tm_hour=22, tm_min=33, tm_sec=39, tm_wday=0, tm_yday=200, tm_isdst=0)

最后用time.strftime()方法，把刚才的一大串信息格式化成我们想要的东西，输出时间日期

ime.strftime里面有很多参数，可以让你能够更随意的输出自己想要的东西：
下面是time.strftime的参数：
strftime(format[, tuple]) -> string
将指定的struct_time(默认为当前时间)，根据指定的格式化字符串输出
python中时间日期格式化符号：
%y 两位数的年份表示（00-99）
%Y 四位数的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小时制小时数（0-23）
%I 12小时制小时数（01-12） 
%M 分钟数（00=59）
%S 秒（00-59）

%a 本地简化星期名称
%A 本地完整星期名称
%b 本地简化的月份名称
%B 本地完整的月份名称
%c 本地相应的日期表示和时间表示
%j 年内的一天（001-366）
%p 本地A.M.或P.M.的等价符
%U 一年中的星期数（00-53）星期天为星期的开始
%w 星期（0-6），星期天为星期的开始
%W 一年中的星期数（00-53）星期一为星期的开始
%x 本地相应的日期表示
%X 本地相应的时间表示
%Z 当前时区的名称
%% %号本身 

=====================================================================================================================================================
11.iDT的编译需要有两个库的支持：
    OpenCV library (tested with OpenCV-2.4.11)
    ffmpeg library (tested with ffmpeg-0.11.1)
>>>opencv的安装：
   sudo apt-get update
   sudo apt-get install libcv-dev
   
   ******安装过程中出现matlab接口相关配置，需要提供matlab安装路径******
   ---先安装matlab:参考 《linux下安装matlab.doc》
=====================================================================================================================================================
12.
cd iDT-master
make
>>>make出错：
(1)DenseTrackStab.h:24:39: fatal error: opencv2/nonfree/nonfree.hpp: No such file or directory
 #include "opencv2/nonfree/nonfree.hpp"

---解决方案：安装nonfree
#大概是添加源？
sudo add-apt-repository --yes ppa:xqms/opencv-nonfree  
sudo apt-get update 
sudo apt-get install libopencv-nonfree-dev

(2)DenseTrackStab.h:5:28: fatal error: opencv/highgui.h: No such file or directory
 #include <opencv/highgui.h>
---/usr/include/opecv中确实没有highgui.h，直接注释 #include <opencv/highgui.h>这一行

(3)/usr/bin/ld: cannot find -lavdevice
---查看/usr/lib是否有 libavdevice.so.n(n表示数字)
sudo find /use/lib -name "libavdevice.so.*"
然后用软连接：
ln -s libavdevice.so.n libavdevice.so
---或者，搜索系统有没有"libavdevice.so"
sudo cp libavdevice.so /usr/lib
---如果以上不行，手动编译安装ffmpeg(参考《安装ffmpeg》),并将安装目录下的的lib文件夹的libavdevice.so拷贝至/usr/lib

---执行：
cd release 
DenseTrackStab video_file [options]
Options:
  -h                        Display this message and exit
  -S [start frame]          The start frame to compute feature (default: S=0 frame)
  -E [end frame]            The end frame for feature computing (default: E=last frame)
  -L [trajectory length]    The length of the trajectory (default: L=15 frames)
  -W [sampling stride]      The stride for dense sampling feature points (default: W=5 pixels)
  -N [neighborhood size]    The neighborhood size for computing the descriptor (default: N=32 pixels)
  -s [spatial cells]        The number of cells in the nxy axis (default: nxy=2 cells)
  -t [temporal cells]       The number of cells in the nt axis (default: nt=3 cells)
  -H [human bounding box]   The human bounding box file to remove outlier matches (default: None)

ref:lear.inrialpes.fr/people/wang/improved_trajectories

=====================================================================================================================================================
13.ubuntu 比较文件的软件：meld

 在ubuntu中需要比较文件的差异，于是安装meld

apt-get install meld

安装完后，在/usr/bin/下找到meld,然后发送到桌面上，

或者在命令行执行meld命令

打开后选择：file->new ,打开文件选择界面，输入两个文件的路径，后即可看到两个文件的差异情况。

界面很不错哦。

=====================================================================================================================================================
14.MATLAB
###文件操作####
dir(pathOfFile)
----return a struct {name:  ,bytes:   ,...}
----空文件夹存在:. ..
    a = dir(emptydir)
    a{1}.name == '.'   ;   a{2}.name == '..'
    length(a) == 2 

fullfile(dir1,dir2,filename)
----相当于python的os.path.join
=====================================================================================================================================================
15.ubuntu运行程序
./filename
//path/to/file/filename


=====================================================================================================================================================
16.matlab system报错：
>> system(['/home/chang/code/actionRecog/iTDD/DenseTrackStab -f /home/chang/code/actionRecog/improved_trajectory/v_Bowling_g01_c01.avi -T 1']);
Could not initialize capturing /home/chang/code/actionRecog/improved_trajectory/v_Bowling_g01_c01.avi
/home/chang/code/actionRecog/iTDD/DenseTrackStab -f /home/chang/code/actionRecog/improved_trajectory/v_Bowling_g01_c01.avi -T 1: Signal 127

---Could not initialize capturing是因为找不到正确的.so的库，无法打开视频
---在terminal中输入相同命令，却可以正确执行：
>>>/home/chang/code/actionRecog/iTDD/DenseTrackStab -f /home/chang/code/actionRecog/improved_trajectory/v_Bowling_g01_c01.avi -T 1

---matlab使用自带的opencv库，在终端执行下面命令和在matlab用system执行，可以看到使用的动态库不同
>>>ldd /home/chang/code/actionRecog/iTDD/DenseTrackStab
---修改matlab使用的库的路径（系统opencv库在/usr/lib路径下）：
>>setenv('LD_LIBRARY_PATH',['/usr/lib:' getenv('LD_LIBRARY_PATH')])

---还是不行，
>>system(['LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH ldd /home/chang/code/actionRecog/iTDD/DenseTrackStab']);
---发现只要有matlab自带库的路径，总会优先选用自带的

>>system(['LD_LIBRARY_PATH=/usr/lib ldd /home/chang/code/actionRecog/iTDD/DenseTrackStab']);
---直接只用系统的库，成功

################# 关于PATH和LD_LIBRARY_PATH #####################
matlab涉及的路径目前遇到的有三个
1.搜索路径，在菜单栏，setPath可以进行设置。可以把代码或者脚本的路径添加进去，不用每次都弹窗添加路径，也可以直接在脚本中 addpath /path/to/add
2.PATH，执行程序路径(bin),getenv('PATH')可以查看，setenv('path/to/set')可以进行设置，与系统的环境变量相对应的。系统环境变量是系统的写在/etc/profile 和etc/environment设置所有用户的环境变量。
3.LD_LIBRARY_PATH库的路径，getenv('LD_LIBRARY_PATH')可以查看，setenv('LD_LIBRARY_PATH')可以进行设置,设置是一次性的，重启matlab恢复原值。

REF：
https://www.cnblogs.com/zhanglianbo/p/5648237.html
blog.sina.com.cn/s/blog_59cf67260100l2c3.html

=====================================================================================================================================================
17.matlab读取视频报错：
>>>video=VideoReader('test2.avi');
   Error using VideoReader/init (line 619)
   Could not read file due to an unexpected error. Reason: Unable to initialize the video obtain properties.

---安装gstream才能支持VideoReader解码，ffmpeg不能
sudo add-apt-repository ppa:mc3man/gstffmpeg-keep
sudo apt-get update
sudo apt-get install gstreamer0.10-ffmpeg
REF:https://cn.mathworks.com/matlabcentral/answers/255157-can-t-load-video-using-videoreader-in-matlab-r2015-on-ubuntu-15-04-could-not-read-file-due-to-an-un

=====================================================================================================================================================


#zyz@civic.org.cn# 
#include "opencv2/gpu/gpu.hpp" 但不存在这个文件




=====================================================================================================================================================

ubuntu 14.04 终端历史命令保存在 ～/.bash_history：
ps -ef |grep tensorflow |grep python
du -h --max-depth=1 /home/;chang/   
du -s /home/chang/* | sort -nr | head 选出排在前面的10个


